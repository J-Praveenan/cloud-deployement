name: CI/CD - Spring Microservices â†’ K8s

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKER_NAMESPACE: praveenan015      # your Docker Hub namespace
  K8S_NAMESPACE: default              # change if you deploy to another namespace
  K8S_MANIFEST_DIR: k8s               # folder containing your *.yaml

jobs:
  build_and_push_images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # context: path to the directory containing the Dockerfile for each service
          - service: cloud-gateway
            image: cloudgateway
            context: ./cloud-gateway
          - service: config-server
            image: configserver
            context: ./config-server
          - service: order-service
            image: orderservice
            context: ./order-service
          - service: payment-service
            image: paymentservice
            context: ./payment-service
          - service: product-service
            image: productservice
            context: ./product-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push ${{ matrix.image }}
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ matrix.context }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.image }}:latest
            ${{ env.REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.image }}:${{ github.sha }}
          provenance: false

  deploy:
    name: Deploy to Kubernetes
    needs: build_and_push_images
    runs-on: ubuntu-latest
    env:
      SHA_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Write kubeconfig from secret
        run: |
          mkdir -p "$HOME/.kube"
          : > "$HOME/.kube/config"
          printf "%s" "${KUBE_CONFIG}" > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}   # raw kubeconfig YAML

      - name: Apply manifests
        run: |
          kubectl apply -n "${K8S_NAMESPACE}" -R -f "${K8S_MANIFEST_DIR}/"

      # Force deployments to use the freshly pushed SHA tag
      - name: Update images to SHA tag
        run: |
          set -e
          kubectl -n "${K8S_NAMESPACE}" set image deploy/cloud-gateway-app \
            cloud-gateway-app=${{ env.REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/cloudgateway:${SHA_TAG} --record
          kubectl -n "${K8S_NAMESPACE}" set image deploy/config-server-app \
            config-server-app=${{ env.REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/configserver:${SHA_TAG} --record
          kubectl -n "${K8S_NAMESPACE}" set image deploy/order-service-app \
            order-service-app=${{ env.REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/orderservice:${SHA_TAG} --record
          kubectl -n "${K8S_NAMESPACE}" set image deploy/payment-service-app \
            payment-service-app=${{ env.REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/paymentservice:${SHA_TAG} --record
          kubectl -n "${K8S_NAMESPACE}" set image deploy/product-service-app \
            product-service-app=${{ env.REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/productservice:${SHA_TAG} --record

      - name: Wait for rollouts
        run: |
          set -e
          kubectl -n "${K8S_NAMESPACE}" rollout status deploy/cloud-gateway-app --timeout=180s
          kubectl -n "${K8S_NAMESPACE}" rollout status deploy/config-server-app --timeout=180s
          kubectl -n "${K8S_NAMESPACE}" rollout status deploy/order-service-app --timeout=180s
          kubectl -n "${K8S_NAMESPACE}" rollout status deploy/payment-service-app --timeout=180s
          kubectl -n "${K8S_NAMESPACE}" rollout status deploy/product-service-app --timeout=180s
