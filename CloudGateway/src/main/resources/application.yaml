server:
  port: 9090

spring:
  application:
    name: API-GATEWAY

  redis:
    host: redis
    port: 6379

  # If you use a Spring Cloud Config Server, keep this.
  config:
    import: configserver:${CONFIG_SERVER_URL:http://localhost:9296}

  security:
    oauth2:
      client:
        registration:
          okta:
            provider: okta
            client-id: 0oau5g94c81w8fGeW697
            client-secret: LOxdblYg0wdnh75UkRx-9T_a8mbXp16yvpao8qZi6Zgup3x4DKl127VapsLFYaGH
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            # Request INTERNAL explicitly so it appears in the access token
            scope:
              - openid
              - profile
              - email
              - offline_access
              - internal
        provider:
          okta:
            issuer-uri: https://integrator-3151659.okta.com/oauth2/default

  cloud:
    gateway:
      # Forward the logged-in user's access token to downstream services
      default-filters:
        - TokenRelay
      routes:
        - id: ORDER-SERVICE
          uri: http://order-service-svc
          predicates:
            - Path=/order/**
          filters:
            - name: CircuitBreaker
              args:
                name: ORDER-SERVICE
                fallbackuri: forward:/orderServiceFallBack
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 1

        - id: PAYMENT-SERVICE
          uri: http://payment-service-svc
          predicates:
            - Path=/payment/**
          filters:
            - name: CircuitBreaker
              args:
                name: PAYMENT-SERVICE
                fallbackuri: forward:/paymentServiceFallBack
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 1

        - id: PRODUCT-SERVICE
          uri: http://product-service-svc
          predicates:
            - Path=/product/**
          filters:
            - name: CircuitBreaker
              args:
                name: PRODUCT-SERVICE
                fallbackuri: forward:/productServiceFallBack
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 1

# Helpful for verifying what config actually loaded at runtime
management:
  endpoints:
    web:
      exposure:
        include: env,health,info

# Optional: view the exact /authorize URL and scope set in logs
logging:
  level:
    org.springframework.security: DEBUG
